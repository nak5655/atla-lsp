using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Imperative;

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Newtonsoft.Json;
using Newtonsoft.Json.Linq;

namespace Atla.LanguageServer
{
    public abstract class LSPMessage
    {
        public mutable headers: Hashtable[string, string] = Hashtable();
        public mutable content: JObject;
        
        public calcContentLength(): void {
            headers.Add("Content-Length", Encoding.UTF8.GetBytes(content.ToString(Formatting.None)).Length.ToString());
        }
        
        public sendMessage(): void {
            content.Add(JProperty("jsonrpc", "2.0"));
            
            calcContentLength();
            
            foreach((key, value) in headers.KeyValuePairs) {
                Console.WriteLine($"$(key): $(value)");
            }
            Console.WriteLine();
            
            Console.Write(content.ToString(Formatting.None));
        }
        
        static public waitMessage(): LSPMessage {
            def headers = Hashtable();
            while (true) {
                def line = Console.ReadLine();
                when (line.Length == 0)
                    break;
                
                def keyValue = line.Split(array[": "], 2, StringSplitOptions.None);
                when (keyValue.Length != 2)
                    break;
                
                headers.Add(keyValue.First(), keyValue.Last());
            }
            
            def contentLength = int.Parse(headers.Get("Content-Length").GetValueOrDefault());
            def sb = StringBuilder();
            for (mutable i = 0; i < contentLength; i++) {
                _ = sb.Append(Console.Read() :> char);
            }
            
            def json = JObject.Parse(sb.ToString());
            
            if (json.ContainsKey("id"))
                LSPRequestMessage(headers, json)
            else
                LSPNotificationMessage(headers, json)
        }
    }
}
