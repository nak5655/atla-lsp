using Atla.Lang.Parser;
using Atla.Lang.Parse;
using Atla.Lang.Hir;

using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Imperative;

using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Diagnostics;

using Newtonsoft.Json;
using Newtonsoft.Json.Linq;

namespace Atla.LanguageServer
{
    public class Server
    {
        mutable isInitialized: bool = false;
        public mutable isAvailablePublishDiagnostics: bool = false;
        public mutable tokenTypes: array[string] = array[];
        
        buffers: Hashtable[string, string] = Hashtable();
        
        mutable compiler: option[Atla.Lang.Compiler] = None();
        mutable asm: option[Atla.Lang.Hir.Assembly] = None();
        compileProblems: List[Atla.Lang.Problem] = List();
        
        public initialize(request: LSPRequestMessage): LSPResponseMessage {
            // check the client supoports publishDiagnostics.
            isAvailablePublishDiagnostics = try {
                request.content["params"]["capabilities"]["textDocument"]["publishDiagnostics"]["relatedInformation"].ToString().ToLower() == "true"
            } catch {
                | _ => false
            }
            def supportedTokenTypes = try {
                request.content["params"]["capabilities"]["textDocument"]["semanticTokens"]["tokenTypes"].Map(_.ToString())
            } catch {
                | _ => []
            };
            
            // available TokenTypes = client TokenTypes ∩ server TokenTypes
            tokenTypes = [
                "keyword",
                "comment",
                "string",
                "number",
                "variable",
                "type"
            ].Intersect(supportedTokenTypes).ToArray();
            
            def capabilities = ServerCapabilities(
                documentHighlightProvider = true,
                textDocumentSync = TextDocumentSyncOptions(
                    openClose = true,
                    change = TextDocumentSyncKind.Full,
                ),
                semanticTokensProvider = SemanticTokensOptions(
                    legend = SemanticTokensLegend(tokenTypes.ToNList(), []), // TODO
                    range = false,
                    full = true,
                )
            );
            
            def assembly = Assembly.GetExecutingAssembly();
            def versionInfo = FileVersionInfo.GetVersionInfo(assembly.Location);
            def serverInfo = ServerInfo("atla-lsp", versionInfo.FileVersion);
            
            LSPResponseMessage.initializeResult(request.id(), capabilities, serverInfo)
        }
        
        public tokenize(uri: string): list[uint] {
            when (!buffers.ContainsKey(uri))
                return [];
            
            def text = buffers[uri];
            
            _tokenize(text)
        }
        
        // テストしやすいように関数を分けた
        public _tokenize(text: string): list[uint] {
            def lexer = Lexer();
            match (lexer.tokenize(text)) {
                | Result.Success(tokens, _) => {
                    mutable line = 0;
                    mutable col = 0;
                    def data = List();
                    foreach (token in tokens) {
                        def tline = token.span.lo.line;
                        def tcol = token.span.lo.col;
                        mutable tlen = token.span.hi.index - token.span.lo.index;
                        
                        def tokenType = match (token) {
                            | Token.Delim(s) when char.IsLetter(s.First()) => Some("keyword")
                            | Token.Comment => Some("comment")
                            | Token.Int => Some("number")
                            | Token.String => Some("string")
                            | Token.Id(s) => if (char.IsUpper(s.First())) Some("type") else Some("variable") // TODO
                            | _ => None()
                        }
                        
                        mutable dline = tline - line;
                        mutable dcol = if (dline == 0) tcol - col else tcol;
                        
                        when (tlen < 0) {
                            LSPNotificationMessage.windowLogMessage($"$token has an illegal span: $token.span", MessageType.Log).sendMessage();
                            tlen = 0;
                        }
                        when (dline < 0) {
                            LSPNotificationMessage.windowLogMessage($"$token has an illegal span: $token.span", MessageType.Log).sendMessage();
                            dline = 0;
                        }
                        when (dcol < 0) {
                            LSPNotificationMessage.windowLogMessage($"$token has an illegal span: $token.span", MessageType.Log).sendMessage();
                            dcol = 0;
                        }
                         
                        when (tokenType.IsSome && tokenTypes.Contains(tokenType.Value)) {
                            data.AddRange([dline, dcol, tlen, Array.IndexOf(tokenTypes, tokenType.Value), 0].Map(Convert.ToUInt32(_)));
                            line = token.span.lo.line;
                            col = token.span.lo.col;
                        }
                    }
                    data.ToNList()
                }
                | Result.Failure => []
            }
        }
        
        // TODO PublishDiagnosticsParamsを返す?
        public compile(uri: string, text: string): void {
            buffers[uri] = text;
            
            when (!isAvailablePublishDiagnostics)
                return;
            
            when (compiler.IsNone) {
                compiler = Some(Atla.Lang.Compiler(problem => {
                    compileProblems.Add(problem);
                }));
            }
            
            when (asm.IsNone) {
                asm = Some(Atla.Lang.Hir.Assembly("Application", "Application.exe")); // TODO
                asm.Value.scope = Atla.Lang.Hir.Scope.Assembly(Atla.Lang.Hir.Scope.Global(), "Application"); // TODO
            }

            def filePath = string(uri.Replace('\\', '/').Skip(8).SkipWhile(c => c != '/').ToArray()); // file:///c%3A みたいなのが最初にあるので取り除く
            def root = string(System.IO.Directory.GetCurrentDirectory().Replace('\\', '/').SkipWhile(c => c != '/').ToArray()); // c: を取り除く
            if (filePath.StartsWith(root)) {
                def rel = string(uri.Skip(root.Length).ToArray());
                def modPath = string.Join(Atla.Lang.Consts.MODULE_SEP, rel.Split([System.IO.Path.DirectorySeparatorChar].ToArray()));
                _ = compiler.Value.updateModule(asm.Value, modPath, text);
            } else {
                LSPNotificationMessage.publishDiagnostics(uri, [Diagnostic(spanToRange(Span.zero()), $"filePath is not a sub path of the root direcotry at $root.")]).sendMessage()
            }
        }
        
        spanToRange(span: Atla.Lang.Parse.Span): Range {
            def start = Atla.LanguageServer.Position(span.lo.line, span.lo.col);
            def end = Atla.LanguageServer.Position(span.hi.line, span.hi.col);
            Range(start, end)
        }
    }
}
